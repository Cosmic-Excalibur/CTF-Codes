# https://hasegawaazusa.github.io/common-prime-rsa.html

from Crypto.Util.number import *
from math import gcd
from sage.groups.generic import bsgs

def gen_rsa(nbits: int, gamma: float):
    g = getPrime(int(nbits * gamma))
    alpha = 0.5 - gamma
    while True:
        a = getRandomNBitInteger(int(alpha * nbits))
        p = 2 * g * a + 1
        if is_prime(p):
            b = getRandomNBitInteger(int(alpha * nbits))
            q = 2 * g * b + 1
            h = 2 * g * a * b + a + b
            while not is_prime(q) or is_prime(h) or gcd(a, b) != 1:
                b = getRandomNBitInteger(int(alpha * nbits))
                h = 2 * g * a * b + a + b
                q = 2 * g * b + 1
            return p, q, (a, b, g)

def pollard_rho(N):
    f = lambda x: (pow(x, N-1, N) + 3) % N
    while True:
        t = random.randint(2, N)
        h = f(t)
        step_times = 0
        step_limit = 2
        while True:
            if not step_times < step_limit:
                step_times = 0
                step_limit *= 2
                t = h
                h = f(h)
            p = gcd(abs(int(t) - int(h)), N)
            if p == N:
                break
            elif p > 1:
                return (p, N // p)
            else:
                h = f(h)
                step_times += 1

def known_ab(N, a, b):
    P.<g> = ZZ[]
    f = 4 * a * b * g ^ 2 + 2 * (a + b) * g - N + 1
    g = f.roots()
    if g:
        g = g[0][0]
        p = 2 * g * a + 1
        q = 2 * g * b + 1
        assert p * q == N
        return p, q

def known_g_gt(N, g):
    # g > a + b
    M = (N - 1) // (2 * g)
    c = M % g
    P.<a> = ZZ[]
    f = 2 * g * a ^ 2 - 2 * g * c * a + M - c
    a = f.roots()
    if a:
        a, b = a[0][0], a[1][0]
        p = 2 * g * a + 1
        q = 2 * g * b + 1
        assert p * q == N
        return p, q

def known_g_eq(N, g):
    # g = a + b
    M = (N - 1) // (2 * g)
    P.<a> = ZZ[]
    f = 2 * a ^ 2 - 2 * g * a + (N - 1) // (2 * g ^ 2) - 1
    a = f.roots()
    if a:
        a, b = a[0][0], a[1][0]
        p = 2 * g * a + 1
        q = 2 * g * b + 1
        assert p * q == N
        return p, q

def known_g_lt(N, g, nbits, gamma):
    # g < a + b
    # nbits = N.nbits()
    # gamma = log(g)/log(N)
    cbits = ceil(nbits * (0.5 - 2 * gamma))

    M = (N - 1) // (2 * g)
    u = M // (2 * g)
    v = M - 2 * g * u
    GF = Zmod(N)
    x = GF.random_element()
    y = x ^ (2 * g)
    c = bsgs(y, y ^ u, (2**(cbits-1), 2**(cbits+1)))
    ab = u - c
    apb = v + 2 * g * c
    P.<x> = ZZ[]
    f = x ^ 2 - apb * x + ab
    a = f.roots()
    if a:
        a, b = a[0][0], a[1][0]
        p = 2 * g * a + 1
        q = 2 * g * b + 1
        assert p * q == N
        return p, q


def common_prime_rsa_test():
    print("\r[\033[34m\033[1m*\033[0m] Test 1...", end = '')
    #p, q, (a, b, g) = gen_rsa(512, 0.49)
    N = 84236796025318186855187782611491334781897277899439717384242559751095347166978304126358295609924321812851255222430530001043539925782811895605398187299748256080526691975084042025794113521587064616352833904856626744098904922117855866813505228134381046907659080078950018430266048447119221001098505107823645953039
    try:
        p_, q_ = pollard_rho(N)
        assert p_ * q_ == N
        print("\r[\033[32m\033[1m+\033[0m] Test 1... OK")
    except:
        print("\r[\033[31m\033[1m-\033[0m] Test 1... Failed :(")
    
    print("\r[\033[34m\033[1m*\033[0m] Test 2...", end = '')
    a = 1185431345934512
    b = 1989628969125971
    N = 54692260436051338814890781701826055707958209029414126894070449935683071253184867947357262267840171428710181955973010913204514025135188192484651672240708141692701667242130748316666406528479191422804307020656050201187035928715833163999813216597718706449260040885862566373392398826670863398295350419792842640631
    try:
        p_, q_ = known_ab(N, a, b)
        assert p_ * q_ == N
        print("\r[\033[32m\033[1m+\033[0m] Test 2... OK")
    except:
        print("\r[\033[31m\033[1m-\033[0m] Test 2... Failed :(")
    
    print("\r[\033[34m\033[1m*\033[0m] Test 3...", end = '')
    g = 2056971706333850947354991471886113601423457483931388832864204860321308350537317091564919029078296379733989138742162694786565228112885684303
    N = 67324909911911622626246005558967775211455024820506932698435813321567574468019013664789401988015894964099052816176029553245881317276340043887466584645914352982274378611180595397686920214079479901514703963131435008906250160656759300390805929849374653321934393399433471228218819498373221757779799476717494079667
    try:
        p_, q_ = known_g_gt(N, g)
        assert p_ * q_ == N
        print("\r[\033[32m\033[1m+\033[0m] Test 3... OK")
    except:
        print("\r[\033[31m\033[1m-\033[0m] Test 3... Failed :(")
    
    print("\r[\033[34m\033[1m*\033[0m] Test 4...", end = '')
    g = 2855372645569408464444580237486670388029956719716115953907612135874419892154982850222965560661211729647325085879529571229774148545656169021
    N = 159549169988238873893531105042878385551537587717347282632324748268846735710748763722602882823022008548774298858161130258369850715542192739582830583643642436399008902770027668038725347353393047833875066622910131525247842517372845617227325882916166114361718015983671803859502931814932543107911548450229250776542101141849788751722460468073974316977656001286989710480324512919121409123619799426221232443036698458643438020098037548757403
    try:
        p_, q_ = known_g_eq(N, g)
        assert p_ * q_ == N
        print("\r[\033[32m\033[1m+\033[0m] Test 4... OK")
    except:
        print("\r[\033[31m\033[1m-\033[0m] Test 4... Failed :(")
        
    print("\r[\033[34m\033[1m*\033[0m] Test 5...", end = '')
    g = 28838314918840273611038952856252141148393903858815521699377328440901497
    N = 23895816238623712091906549349650291003358466897973970818205381234024572750472476312894286233088847723906345049342176974080465940396626170377635736786780099297743807402105462746828310247313063710700453371777283064626446124365885063073122303271609231832129823571694756234973129694217982548355078107610764879363
    try:
        p_, q_ = known_g_lt(N, g, 1024, 0.23)
        assert p_ * q_ == N
        print("\r[\033[32m\033[1m+\033[0m] Test 5... OK")
    except:
        print("\r[\033[31m\033[1m-\033[0m] Test 5... Failed :(")